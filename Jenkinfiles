pipeline {
    agent any
    parameters {
         choice  choices: ["Baseline", "APIS", "Full"],
                 description: 'Type of scan that is going to perform inside the container',
                 name: 'SCAN_TYPE'
 
         string defaultValue: "http://10.0.2.15:5050/WebGoat/start.mvc#lesson/WebWolfIntroduction.lesson",
                 description: 'Target URL to scan',
                 name: 'TARGET'
 
         booleanParam defaultValue: true,
                 description: 'Parameter to know if wanna generate report.',
                 name: 'GENERATE_REPORT'
     }
    tools {
        maven 'maven' 
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        // stage ('Build') {
        //   steps {
        //     sh 'mvn spotless:apply'
        //     sh 'mvn clean install -DskipTests'
        //   }
        // }
        // stage('Run SonarQube Analysis') {
        //     steps {
        //         script {
        //             sh "mvn sonar:sonar -Dsonar.projectKey=webgoat25 -Dsonar.host.url=http://10.0.2.15:9000 -Dsonar.login=squ_dacddab9cc32fa2d51de07bd4df2e70113071d3b"
        //         }
        //     }
        // }
        // stage ('OWASP Dependency-Check Vulnerabilities') {
        //     steps {
        //         dependencyCheck additionalArguments: '''
        //             -o "./"
        //             -s "./"
        //             -f "ALL"
        //             --prettyPrint''', odcInstallation: 'dependency-check'
        //         dependencyCheckPublisher pattern: 'dependency-check-report.xml'
        //         }
        //     }
        //  stage('Info Parameter for ZAP') {
        //          steps {
        //              script {
        //                  echo "<--Parameter Initialization-->"
        //                  echo """
        //                  The current parameters are:
        //                      Scan Type: ${params.SCAN_TYPE}
        //                      Target: ${params.TARGET}
        //                      Generate report: ${params.GENERATE_REPORT}
        //                  """
        //              }
        //          }
        //  }
        //  stage('Setting up OWASP ZAP docker container') {
        //      steps {
        //          script {
        //                  echo "Pulling up last OWASP ZAP container --> Start"
        //                  sh 'docker pull owasp/zap2docker-stable'
        //                  echo "Pulling up last VMS container --> End"
        //                  echo "Starting container --> Start"
        //                  sh """
        //                  docker run -dt --name owasp \
        //                  owasp/zap2docker-stable \
        //                  /bin/bash
        //                  """
        //          }
        //      }
        //  }
        //  stage('Prepare wrk directory') {
        //      when {
        //                  environment name : 'GENERATE_REPORT', value: 'true'
        //      }
        //      steps {
        //          script {
        //                  sh """
        //                      docker exec owasp \
        //                      mkdir /zap/wrk
        //                  """
        //              }
        //          }
        //  }
        //  stage('Scanning target on owasp container') {
        //      steps {
        //          script {
        //              scan_type = "${params.SCAN_TYPE}"
        //              echo "----> scan_type: $scan_type"
        //              target = "${params.TARGET}"
        //              if(scan_type == "Baseline"){
        //                  sh """
        //                      docker exec owasp \
        //                      zap-baseline.py \
        //                      -t $target \
        //                      -x report.xml \
        //                      -I
        //                  """
        //              }
        //              else if(scan_type == "APIS"){
        //                  sh """
        //                      docker exec owasp \
        //                      zap-api-scan.py \
        //                      -t $target \
        //                      -x report.xml \
        //                      -I
        //                  """
        //              }
        //              else if(scan_type == "Full"){
        //                  sh """
        //                      docker exec owasp \
        //                      zap-full-scan.py \
        //                      -t $target \
        //                      //-x report.xml
        //                      -I
        //                  """
        //                  //-x report-$(date +%d-%b-%Y).xml
        //              }
        //              else{
        //                  echo "Something went wrong..."
        //              }
        //          }
        //      }
        //  }
           
        //  stage('Copy Report to Workspace'){
        //      steps {
        //          script {
        //              sh '''
        //                  docker cp owasp:/zap/wrk/report.xml ${WORKSPACE}/report.xml
        //              '''
        //          }
        //      }
        //  }
            stage('Nuclei'){
                step {
                    script {
                         echo "Pulling up last Nuclei container --> Start"
                         sh 'docker pull projectdiscovery/nuclei:latest'
                         echo "Pulling up last VMS container --> End"
                         echo "Starting container --> Start"
                         sh """
                         docker run projectdiscovery/nuclei -u ${params.TARGET} -o output.txt
                         """
                    }
                }
            }
    }
    post {
             always {
                 echo "Removing container"
                 sh '''
                     docker stop owasp
                     docker rm owasp
                 '''
             }
         } 
}
